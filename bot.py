import asyncio
from aiogram.fsm import state
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
import logging
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.formatting import Text

logging.basicConfig(level=logging.INFO)

bot = Bot(token='7604779913:AAEnJdFy0PHpe9nF9OD-ygM5DH7Bm1jVCj4')
dp = Dispatcher()

class CurrencyConverter(StatesGroup):
    from_currency = State()  # –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD)
    to_currency = State()    # –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, EUR)
    amount = State()         # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞

button1 = KeyboardButton(text="USD")
button2 = KeyboardButton(text="EUR")
button3 = KeyboardButton(text="RUB")
button4 = KeyboardButton(text="GBP")

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[button1, button2, button3, button4]],  # –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer('–ø—Ä–∏–≤–µ—Ç–∏–∫–∏ –ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏, –Ø - –±–æ—Ç –∫–æ–Ω–≤–µ—Ä–∞—Ç–æ—Ä')

@dp.message(Command('convert'))
async def convert(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º', reply_markup=main_keyboard)
    await state.set_state(CurrencyConverter.from_currency) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "from_currency"

@dp.message(CurrencyConverter.from_currency)
async def get_convert(message: types.Message, state: FSMContext):
    await state.update_data(from_currency=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=main_keyboard)
    await state.set_state(CurrencyConverter.to_currency)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "to_currency"

@dp.message(CurrencyConverter.to_currency)
async def conversion(message: types.Message, state: FSMContext):
    await state.update_data(to_currency=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ")
    await state.set_state(CurrencyConverter.amount)
#
#
@dp.message(CurrencyConverter.amount)
async def get_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(amount=float(message.text))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ
    from_currency = data["from_currency"]
    to_currency = data["to_currency"]
    amount = data["amount"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    conversion_result = await convert_currency(from_currency, to_currency, amount)

    if conversion_result is None:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer(
            f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {amount} {from_currency} ‚Üí {to_currency}:\n"
            f"üîπ {conversion_result:.2f} {to_currency}"
        )

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def convert_currency(from_currency: str, to_currency: str, amount: float):
    url = f"https://v6.exchangerate-api.com/v6/3be3a092e3659483327c5f86/latest/{from_currency}"

    async with httpx.AsyncClient() as client:
        response = await client.get(url)

    if response.status_code != 200:
        return None

    data = response.json()
    print(data)
    conversion_rates = data.get("conversion_rates", {})
    to_currency = conversion_rates.get(to_currency, None)


    return amount * to_currency  # –£–º–Ω–æ–∂–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫—É—Ä—Å


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())